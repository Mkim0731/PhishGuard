üß± 1. Project Structure
A typical Chrome extension project has this structure:

css
Copy
Edit
phishguard-extension/
‚îú‚îÄ‚îÄ manifest.json
‚îú‚îÄ‚îÄ background.js
‚îú‚îÄ‚îÄ content.js
‚îú‚îÄ‚îÄ popup.html
‚îú‚îÄ‚îÄ popup.js
‚îú‚îÄ‚îÄ styles.css
‚îú‚îÄ‚îÄ icons/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îî‚îÄ‚îÄ model_api.py (Flask or FastAPI app)
‚îî‚îÄ‚îÄ model/
    ‚îî‚îÄ‚îÄ phishing_model.pkl
üß© 2. manifest.json ‚Äì Configure Extension
This file defines the extension‚Äôs behavior and permissions.

json
Copy
Edit
{
  "manifest_version": 3,
  "name": "PhishGuard",
  "version": "1.0",
  "description": "Detect phishing emails using ML",
  "permissions": ["scripting", "activeTab", "storage"],
  "host_permissions": ["https://mail.google.com/"],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "content_scripts": [
    {
      "matches": ["https://mail.google.com/*"],
      "js": ["content.js"]
    }
  ]
}
üß† 3. Content Script (content.js) ‚Äì Extract Gmail Text
This runs in the context of the Gmail webpage and grabs the email body.

javascript
Copy
Edit
// Wait for Gmail's DOM to load fully
setTimeout(() => {
  const emailBody = document.querySelector('.ii.gt'); // Gmail class for email body
  const emailText = emailBody?.innerText || '';

  chrome.runtime.sendMessage({ emailText: emailText });
}, 3000);
üîÅ 4. Background Script (background.js) ‚Äì Relay Data
Handles communication between content script and your backend API.

javascript
Copy
Edit
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  fetch('http://localhost:5000/predict', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ email: request.emailText })
  })
    .then(res => res.json())
    .then(data => {
      if (data.prediction === 1) {
        alert("‚ö†Ô∏è This email might be a phishing attempt!");
      }
    });
});
üß™ 5. Backend Model API (Flask Example)
This is your ML model‚Äôs inference server.

python
Copy
Edit
from flask import Flask, request, jsonify
import pickle
import sklearn
import re

app = Flask(__name__)
model = pickle.load(open("phishing_model.pkl", "rb"))
vectorizer = pickle.load(open("vectorizer.pkl", "rb"))

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json['email']
    vector = vectorizer.transform([data])
    prediction = model.predict(vector)[0]
    return jsonify({'prediction': int(prediction)})

if __name__ == '__main__':
    app.run(port=5000)
You‚Äôll need:

bash
Copy
Edit
pip install flask scikit-learn
